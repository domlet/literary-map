<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mapbox Map</title>
  <script src="https://code.jquery.com/jquery-1.8.2.min.js"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css" rel="stylesheet" />
  <link rel="stylesheet" href="style.css">
  <!-- <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Dancing+Script"> -->

</head>

<body>

  <div id="map"></div>
  <p id="demo"></p>

  <script type="text/javascript">

    // external json
    var obj = new Object();
    var error = new Object();
    $.getJSON('books.js').done(function (data) {
      obj = data;
      // document.getElementById("demo").innerHTML = '<h2>' + obj[0].title + '</h2><br/><p>' + obj[0].author + '</p><img src="' + obj[0].img + '" alt="" />';
      document.getElementsByClassName("mapboxgl-popup-content").innerHTML = '<h2>' + obj[0].title + '</h2><br/><p>' + obj[0].author + '</p><img src="' + obj[0].img + '" alt="" />';
    }).error(function (err) {
      error = err;
    });

    // mapbox

    mapboxgl.accessToken = 'pk.eyJ1IjoiZG9tbGV0IiwiYSI6ImNscXNhNnd1ZTNvczUya3BoaGx5MGgwM2cifQ.Alj-V3JuDlT8TWGC4Xui_g';

    var map = new mapboxgl.Map({
      container: 'map',
      projection: 'mercator',
      style: 'mapbox://styles/domlet/clqx1hpcj000k01rc3ihn75lf',
      // style: 'mapbox://styles/mapbox/satellite-v9',
      center: [-96, 37.8], // Example center coordinates (longitude, latitude)
      maxZoom: 10,
      minZoom: 2,
      zoom: 4 // Example zoom level
    });
    let hoveredPolygonId = null; // for mouseover effect

    map.on('style.load', () => {
      map.addSource('mapbox-dem', {
        'type': 'raster-dem',
        'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
        'tileSize': 512,
        'maxzoom': 14
      });
      // add the DEM source as a terrain layer with exaggerated height
      map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 50 });
    });

    map.on('load', () => {
      map.resize();

      // Add a new source using geoJSON
      map.addSource('states', {
        'type': 'geojson',
        'data': 'us_states.geojson'
      });

      /*
      map.addLayer({
        "id": "background",
        "type": "background",
        "layout": {},
        "paint": { "background-color": "#a4cee3" }
      });
      */

      // state fill colors
      map.addLayer({
        'id': 'state-fills',
        'type': 'fill',
        'source': 'states',
        'layout': {},
        "paint": {
          "fill-color": '#fff',
          /*
          "fill-color": [
          "match",
          ["get", "STATE_NAME"],
          ["California", "Rhode Island", "Mississippi", "New York", "Texas", "West Virginia", "Utah", "Minnesota", "Florida", "Washington", "Maine", "Delaware", "South Carolina", "Michigan", "Missouri"],
          "#c9daad",
          ["Nevada", "Oklahoma", "Nebraska", "Connecticut", "Virginia", "Indiana", "Alaska"],
          "#fba05a",
          ["Wyoming", "Louisiana", "Kansas", "Arizona", "Tennessee", "Oregon", "Illinois", "New Jersey", "North Dakota", "Vermont"],
          "#d5bdd5",
          ["Colorado", "Alabama", "Wisconsin", "South Dakota", "Idaho", "Kentucky", "Massachusetts", "Arkansas", "North Carolina", "Hawaii", "Pennsylvania"],
          "#ffa8b1",
          ["New Mexico", "Ohio", "New Hampshire", "Iowa", "Montana", "Georgia", "Maryland"],
          "#ffdfbe",
          "hsla(0, 30%, 31%, 0.65)" // fallback
          ],
          */
          'fill-opacity': [
            'case',
            ['boolean', ['feature-state', 'hover'], false],
            0.5,
            0
          ]

        }
      },
        'hillshade');
      // state borders
      map.addLayer({
        'id': 'state-borders',
        'type': 'line',
        'source': 'states',
        'layout': {},
        "paint": {
          'line-color': '#000',
          'line-width': 2
        },
      });
      // state labels
      map.addLayer({
        'id': 'state-labels',
        'type': 'symbol',
        'source': 'states',
        "layout": {
          "text-field": ["to-string", ["get", "STATE_NAME"]],
          "text-font": [
            "Dancing Script Regular",
            "Arial Unicode MS Regular"
          ]
        }, "paint": {}
      });

      // When the user moves their mouse over the state-fill layer, we'll update the
      // feature state for the feature under the mouse.
      map.on('mousemove', 'state-fills', (e) => {
        if (e.features.length > 0) {
          if (hoveredPolygonId !== null) {
            map.setFeatureState(
              { source: 'states', id: hoveredPolygonId },
              { hover: false }
            );
          }
          hoveredPolygonId = e.features[0].id;
          map.setFeatureState(
            { source: 'states', id: hoveredPolygonId },
            { hover: true }
          );
        }
      });

      // When the mouse leaves the state-fill layer, update the feature state of the
      // previously hovered feature.
      map.on('mouseleave', 'state-fills', () => {
        if (hoveredPolygonId !== null) {
          map.setFeatureState(
            { source: 'states', id: hoveredPolygonId },
            { hover: false }
          );
        }
        hoveredPolygonId = null;
      });

      // popups
      map.on('click', 'state-fills', (e) => {
        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();
        const stateName = e.features[0].properties.STATE_NAME;

        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        console.log(coordinates)
        console.log(stateName)
        new mapboxgl.Popup()
          .setLngLat(coordinates[0][0])
          // .setHTML(stateName)
          .setHTML(document.getElementsByClassName("mapboxgl-popup-content").innerHTML = '<img src="' + obj[0].img + '" alt="" /><h2>' + obj[0].title + '</h2><br/><p>' + obj[0].author + '</p>')
          .addTo(map);
      });



    });


  </script>


</body>

</html>